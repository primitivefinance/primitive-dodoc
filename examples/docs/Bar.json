{
    "methods": {
        "baap(uint256,address)": {
            "stateMutability": "nonpayable",
            "code": "function baap(uint256 bar, address aar) external nonpayable",
            "inputs": {
                "bar": {
                    "type": "uint256",
                    "description": "Number of bar"
                },
                "aar": {
                    "type": "address",
                    "description": "Address of aar"
                }
            },
            "outputs": {},
            "notice": "Baaps the yaps"
        },
        "boop(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function boop(uint256 bar) external nonpayable",
            "inputs": {
                "bar": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "notice": "Cool function bro",
            "custom:requirement": "Check first requirementCheck second requirement"
        },
        "boop(uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function boop(uint256 bar, uint256 bar2) external nonpayable",
            "inputs": {
                "bar": {
                    "type": "uint256"
                },
                "bar2": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "notice": "Alt cool function bro"
        },
        "set(tuple)": {
            "stateMutability": "nonpayable",
            "code": "function set(IBar.T t) external nonpayable",
            "inputs": {
                "t": {
                    "type": "IBar.T"
                }
            },
            "outputs": {}
        }
    },
    "events": {
        "Transfer": {
            "code": "event Transfer(uint256 foo)",
            "inputs": {
                "foo": {
                    "type": "uint256",
                    "indexed": false
                }
            },
            "notice": "Emitted when transfer"
        }
    },
    "errors": {
        "Doh": {
            "code": "error Doh(bool yay)",
            "inputs": {
                "yay": {
                    "type": "bool",
                    "description": "A bool"
                }
            },
            "notice": "Thrown when doh",
            "details": "Bad doh error",
            "custom:info": "Additional info"
        }
    },
    "path": "",
    "title": "Bar contract",
    "notice": "Manages the bar",
    "details": "Blablou",
    "author": "Primitive",
    "custom:version": "v2.0.1",
    "name": "Bar"
}